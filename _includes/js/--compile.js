// Generated by CoffeeScript 1.4.0
(function() {
  var MyGovBar,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  MyGovBar = (function() {

    MyGovBar.prototype.el = $("#bar");

    MyGovBar.prototype.Models = {};

    MyGovBar.prototype.Collections = {};

    MyGovBar.prototype.Routers = {};

    MyGovBar.prototype.Views = {};

    function MyGovBar() {
      this.send = __bind(this.send, this);

      this.recieve = __bind(this.recieve, this);

      var indexView;
      this.parent_url = decodeURIComponent(document.location.hash.replace(/^#/, '')).match(/([^:]+:\/\/.[^/]+)/)[1];
      XD.receiveMessage(this.recieve, this.parent_url);
      window.page = new Discovery.Models.Page;
      indexView = new Discovery.Views.Index({
        model: page,
        el: $("#bar")
      });
    }

    MyGovBar.prototype.recieve = function(msg) {
      switch (msg.data) {
        case "shown":
        case "hidden":
          return this.toggleVisibility();
      }
    };

    MyGovBar.prototype.send = function(msg) {
      return XD.postMessage(msg, this.parent_url);
    };

    MyGovBar.prototype.toggleVisibility = function() {
      this.el.toggleClass('hidden');
      return this.el.toggleClass('shown');
    };

    return MyGovBar;

  })();

  window.MyGovBar = new MyGovBar();

  MyGovBar.Models.Page = (function(_super) {

    __extends(Page, _super);

    function Page() {
      return Page.__super__.constructor.apply(this, arguments);
    }

    Page.prototype.paramRoot = 'page';

    Page.prototype.urlRoot = "http://localhost:3000/pages";

    Page.prototype.url = function() {
      var url;
      url = this.urlRoot;
      if (this.id != null) {
        url += "/" + this.id;
      }
      url += ".json?callback=?";
      return url;
    };

    Page.prototype.lookup = function() {
      var old_url,
        _this = this;
      old_url = this.url;
      this.url = this.urlRoot + "/lookup.json?url=" + this.get("url") + "&callback=?";
      this.fetch({
        error: function(page, err) {
          if (err.status !== 404) {
            return;
          }
          return _this.save();
        }
      });
      return this.url = old_url;
    };

    Page.prototype.initialize = function() {
      return this.lookup();
    };

    Page.prototype.defaults = {
      url: document.referrer
    };

    Page.prototype.get_meta_keywords = function() {
      return $("meta[name] ").filter(function() {
        return this.name.toLowerCase() === "keywords";
      }).attr("content");
    };

    return Page;

  })(Backbone.Model);

  MyGovBar.Collections.PagesCollection = (function(_super) {

    __extends(PagesCollection, _super);

    function PagesCollection() {
      return PagesCollection.__super__.constructor.apply(this, arguments);
    }

    PagesCollection.prototype.model = MyGovBar.Models.Page;

    PagesCollection.prototype.url = '/pages';

    return PagesCollection;

  })(Backbone.Collection);

  MyGovBar.Views.Index = (function(_super) {

    __extends(Index, _super);

    function Index() {
      return Index.__super__.constructor.apply(this, arguments);
    }

    Index.prototype.template = $('#index_template').html();

    Index.prototype.events = {
      "click #save_tags": "save",
      "click #toggle": "toggle"
    };

    Index.prototype.render = function() {
      var rendered;
      rendered = _.template(this.template);
      $(this.el).html(this.rendered(this.model.toJSON()));
      $('.star').rating({
        callback: function() {}
      });
      return this;
    };

    Index.prototype.initialize = function() {
      _.bindAll(this, "render");
      return this.model.bind('change', this.render);
    };

    Index.prototype.save = function() {
      this.model.save({
        tag_list: $("#tag_list").val()
      });
      return false;
    };

    Index.prototype.fetch = function() {
      return this.model.fetch();
    };

    Index.prototype.toggle = function() {
      $(this.el).toggleClass('expanded');
      $(this.el).toggleClass('minimized');
      return MyGovBar.send('toggle');
    };

    return Index;

  })(Backbone.View);

  MyGovBar.Routers.Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.routes = {
      "": "root"
    };

    Router.prototype.root = function() {
      var indexView;
      window.page = new Discovery.Models.Page;
      return indexView = new Discovery.Views.Index({
        model: page,
        el: $("#bar")
      });
    };

    return Router;

  })(Backbone.Router);

}).call(this);
