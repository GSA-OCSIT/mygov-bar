// Generated by CoffeeScript 1.4.0
(function() {
  var CrossDomain, XD, router,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MyGovBar.Models.Page = (function(_super) {

    __extends(Page, _super);

    function Page() {
      return Page.__super__.constructor.apply(this, arguments);
    }

    Page.prototype.paramRoot = 'page';

    Page.prototype.urlRoot = MyGovBar.config.api_url + "/pages";

    Page.prototype.url = function() {
      var url;
      url = this.urlRoot;
      if (this.id != null) {
        url += "/" + this.id;
      }
      url += ".json?callback=?";
      return url;
    };

    Page.prototype.lookup = function() {
      var old_url,
        _this = this;
      old_url = this.url;
      this.url = this.urlRoot + "/lookup.json?url=" + this.get("url") + "&callback=?";
      this.fetch({
        error: function(page, err) {
          if (err.status !== 404) {
            return;
          }
          return _this.save();
        }
      });
      this.url = old_url;
      return this.trigger('change');
    };

    Page.prototype.initialize = function() {
      return this.lookup();
    };

    Page.prototype.defaults = {
      url: document.referrer
    };

    Page.prototype.get_meta_keywords = function() {
      return $("meta[name] ").filter(function() {
        return this.name.toLowerCase() === "keywords";
      }).attr("content");
    };

    return Page;

  })(Backbone.Model);

  MyGovBar.Collections.PagesCollection = (function(_super) {

    __extends(PagesCollection, _super);

    function PagesCollection() {
      return PagesCollection.__super__.constructor.apply(this, arguments);
    }

    PagesCollection.prototype.model = MyGovBar.Models.Page;

    PagesCollection.prototype.url = '/pages';

    return PagesCollection;

  })(Backbone.Collection);

  MyGovBar.Views.Mini = (function(_super) {

    __extends(Mini, _super);

    function Mini() {
      return Mini.__super__.constructor.apply(this, arguments);
    }

    Mini.prototype.el = '#bar';

    Mini.prototype.events = {
      "click #toggle": "toggle"
    };

    Mini.prototype.render = function() {
      var relatedView;
      this.$el.clearQueue();
      this.$el.animate({
        width: '100%'
      }, 1000);
      this.$el.addClass('mini');
      this.$el.addClass('shown');
      this.$el.removeClass('expanded');
      this.$el.removeClass('hidden');
      return relatedView = new MyGovBar.Views.Related({
        model: this.model
      });
    };

    Mini.prototype.toggle = function() {
      return MyGovBar.Router.navigate('expanded', true);
    };

    return Mini;

  })(Backbone.View);

  MyGovBar.Views.Related = (function(_super) {

    __extends(Related, _super);

    function Related() {
      this.render = __bind(this.render, this);
      return Related.__super__.constructor.apply(this, arguments);
    }

    Related.prototype.el = "#drawer";

    Related.prototype.template = $("#related_template").html();

    Related.prototype["class"] = "related";

    Related.prototype.render = function() {
      var compiled;
      compiled = _.template(this.template);
      return this.$el.html(compiled(this.model.toJSON()));
    };

    Related.prototype.initialize = function() {
      return this.model.on('change', this.render);
    };

    return Related;

  })(Backbone.View);

  MyGovBar.Views.Hidden = (function(_super) {

    __extends(Hidden, _super);

    function Hidden() {
      return Hidden.__super__.constructor.apply(this, arguments);
    }

    Hidden.prototype.el = "#bar";

    Hidden.prototype.render = function() {
      this.$el.removeClass('shown');
      this.$el.addClass('hidden');
      this.$el.removeClass('mini');
      this.$el.removeClass('expanded');
      this.$el.clearQueue();
      return this.$el.animate({
        width: '0px'
      }, 1000);
    };

    return Hidden;

  })(Backbone.View);

  MyGovBar.Views.Expanded = (function(_super) {

    __extends(Expanded, _super);

    function Expanded() {
      return Expanded.__super__.constructor.apply(this, arguments);
    }

    Expanded.prototype.el = "#bar";

    Expanded.prototype.render = function() {
      this.$el.removeClass('mini');
      this.$el.addClass('expanded');
      return MyGovBar.CrossDomain.send('toggle');
    };

    return Expanded;

  })(Backbone.View);

  XD = {
    interval_id: void 0,
    last_hash: void 0,
    cache_bust: 1,
    attached_callback: void 0,
    window: this,
    postMessage: function(message, target_url, target) {
      if (!target_url) {
        return;
      }
      target = target || parent;
      if (window["postMessage"]) {
        return target["postMessage"](message, target_url.replace(/([^:]+:\/\/[^\/]+).*/, "$1"));
      } else {
        if (target_url) {
          return target.location = target_url.replace(/#.*$/, "") + "#" + (+(new Date)) + (cache_bust++) + "&" + message;
        }
      }
    },
    receiveMessage: function(callback, source_origin) {
      var attached_callback, interval_id;
      if (window["postMessage"]) {
        if (callback) {
          attached_callback = function(e) {
            if ((typeof source_origin === "string" && e.origin !== source_origin) || (Object.prototype.toString.call(source_origin) === "[object Function]" && source_origin(e.origin) === !1)) {
              console.log("cross iframe request blocked. Domains " + e.origin + " and " + source_origin + " must match.");
              return !1;
            }
            return callback(e);
          };
        }
        if (window["addEventListener"]) {
          return window[(callback ? "addEventListener" : "removeEventListener")]("message", attached_callback, !1);
        } else {
          return window[(callback ? "attachEvent" : "detachEvent")]("onmessage", attached_callback);
        }
      } else {
        interval_id && clearInterval(interval_id);
        interval_id = null;
        if (callback) {
          return interval_id = setInterval(function() {
            var hash, last_hash, re;
            hash = document.location.hash;
            re = /^#?\d+&/;
            if (hash !== last_hash && re.test(hash)) {
              last_hash = hash;
              return callback({
                data: hash.replace(re, "")
              });
            }
          }, 100);
        }
      }
    }
  };

  CrossDomain = (function() {

    CrossDomain.prototype.bar = $('#bar');

    function CrossDomain() {
      this.send = __bind(this.send, this);

      this.recieve = __bind(this.recieve, this);

      var parts;
      parts = decodeURIComponent(document.location.hash.replace(/^#/, '')).match(/([^:]+:\/\/.[^/]+)/);
      if (!(parts != null)) {
        return;
      }
      this.parent_url = parts[1];
      XD.receiveMessage(this.recieve, this.parent_url);
    }

    CrossDomain.prototype.recieve = function(msg) {
      return MyGovBar.Router.navigate(msg.data, true);
    };

    CrossDomain.prototype.send = function(msg) {
      return XD.postMessage(msg, this.parent_url);
    };

    return CrossDomain;

  })();

  MyGovBar.CrossDomain = new CrossDomain();

  router = (function(_super) {

    __extends(router, _super);

    function router() {
      return router.__super__.constructor.apply(this, arguments);
    }

    router.prototype.routes = {
      "hidden": "hide",
      "expand": "expand",
      "related": "related",
      "tags": "tags",
      "search": "search",
      "feedback": "feedback",
      "mini": "mini",
      "*path": "minify"
    };

    router.prototype.mini = function() {
      var miniView;
      if (!(MyGovBar.page != null)) {
        MyGovBar.page = new MyGovBar.Models.Page();
      }
      miniView = new MyGovBar.Views.Mini({
        model: MyGovBar.page
      });
      return miniView.render();
    };

    router.prototype.minify = function() {
      return this.navigate('mini', true);
    };

    router.prototype.expand = function() {
      var view;
      view = new MyGovBar.Views.Expanded;
      return view.render();
    };

    router.prototype.hide = function() {
      var view;
      view = new MyGovBar.Views.Hidden;
      return view.render();
    };

    return router;

  })(Backbone.Router);

  MyGovBar.Router = new router();

}).call(this);
